name: Deploy To ECR

on:
  push:
    branches: ["main"]

jobs:
  build-amd:
    env:
      DATABASE_URL: "postgresql://"
    strategy:
      matrix:
        app: ["builder", "viewer"]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract existing image metadata
        id: image-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/zazubot-${{ matrix.app }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          labels: ${{ steps.image-meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha,scope=${{ matrix.app }}-amd
          cache-to: type=gha,scope=${{ matrix.app }}-amd,mode=max
          build-args: |
            SCOPE=${{ matrix.app }}
          outputs: type=image,name=${{ steps.login-ecr.outputs.registry }}/zazubot-${{ matrix.app }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests/${{ matrix.app }}
          digest="${{ steps.docker_build.outputs.digest }}"
          touch "/tmp/digests/${{ matrix.app }}/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-amd-${{ matrix.app }}
          path: /tmp/digests/${{matrix.app}}/*
          if-no-files-found: error
          retention-days: 1

  build-arm:
    env:
      DATABASE_URL: "postgresql://"
    strategy:
      matrix:
        app: ["builder", "viewer"]
    runs-on: buildjet-8vcpu-ubuntu-2204-arm
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract existing image metadata
        id: image-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/zazubot-${{ matrix.app }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          labels: ${{ steps.image-meta.outputs.labels }}
          platforms: linux/arm64
          cache-from: type=gha,scope=${{ matrix.app }}-arm
          cache-to: type=gha,scope=${{ matrix.app }}-arm,mode=max
          build-args: |
            SCOPE=${{ matrix.app }}
          outputs: type=image,name=${{ steps.login-ecr.outputs.registry }}/zazubot-${{ matrix.app }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests/${{ matrix.app }}
          digest="${{ steps.docker_build.outputs.digest }}"
          touch "/tmp/digests/${{ matrix.app }}/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-arm-${{ matrix.app }}
          path: /tmp/digests/${{matrix.app}}/*
          if-no-files-found: error
          retention-days: 1

  merge-and-push:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs:
      - build-amd
      - build-arm
    strategy:
      matrix:
        app: ["builder", "viewer"]
    steps:
      - name: Download ARM digests
        uses: actions/download-artifact@v4
        with:
          name: digests-arm-${{ matrix.app }}
          path: /tmp/digests/${{ matrix.app }}
      - name: Download AMD digests
        uses: actions/download-artifact@v4
        with:
          name: digests-amd-${{ matrix.app }}
          path: /tmp/digests/${{ matrix.app }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/zazubot-${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            latest

      - name: Create manifest list and push
        working-directory: /tmp/digests/${{ matrix.app }}
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.login-ecr.outputs.registry }}/zazubot-${{ matrix.app }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ steps.login-ecr.outputs.registry }}/zazubot-${{ matrix.app }}:${{ steps.meta.outputs.version }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: merge-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Extract body from changelog
        run: |
          NEW_VERSION=$(echo '${{ github.ref }}' | sed 's/refs\/tags\/v//')
          echo $NEW_VERSION
          sed -n -e "/## ${NEW_VERSION}/,/<a/ p" ./CHANGELOG.md | sed -e '1,2d' | sed -e '$d' | sed -e '$d' > extractedBody.md
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: "extractedBody.md"
